<?xml version="1.0" encoding="utf-8" ?>
<Game Name="Asteroids" Width="1280" Height="720" FirstScene="Game" IsFullScreen="false" xmlns="http://www.kinectitude.com/2012/v1">

  <Using File="Kinectitude.Kinect.dll">
    <Define Name="KinectFollowComponent" Class="Kinectitude.Kinect.KinectFollowComponent"/>
    <Define Name="KinectManager" Class="Kinectitude.Kinect.KinectManager"/>
    <Define Name="GestureEvent" Class="Kinectitude.Kinect.GestureEvent"/>
  </Using>

  <Using File="Kinectitude.Physics.dll">
    <Define Name="PhysicsManager" Class="Kinectitude.Physics.PhysicsManager"/>
    <Define Name="PhysicsComponent" Class="Kinectitude.Physics.PhysicsComponent"/>
    <Define Name="CrossesLineEvent" Class="Kinectitude.Physics.CrossesLineEvent"/>
    <Define Name="CollisionEvent" Class="Kinectitude.Physics.CollisionEvent"/>
  </Using>

  <Using File="Kinectitude.Render.dll">
    <Define Name="RenderManager" Class="Kinectitude.Render.RenderManager"/>
    <Define Name="RenderComponent" Class="Kinectitude.Render.RenderComponent"/>
    <Define Name="TextRenderComponent" Class="Kinectitude.Render.TextRenderComponent"/>
    <Define Name="ImageRenderComponent" Class="Kinectitude.Render.ImageRenderComponent" />
  </Using>

  <Using File="Kinectitude.Sound.dll">
    <Define Name="SoundManager" Class="Kinectitude.Sound.SoundManager"/>
    <Define Name="SoundComponent" Class="Kinectitude.Sound.SoundComponent"/>
    <Define Name="PlaySoundAction" Class="Kinectitude.Sound.PlaySoundAction"/>
    <Define Name="StopSoundAction" Class="Kinectitude.Sound.StopSoundAction"/>
  </Using>

  <Using File="Kinectitude.DirectInput.dll">
    <Define Name="KeyEvent" Class="Kinectitude.DirectInput.KeyEvent"/>
    <Define Name="KeyboardManager" Class="Kinectitude.DirectInput.KeyboardManager"/>
    <Define Name="MouseManager" Class="Kinectitude.DirectInput.MouseManager"/>
    <Define Name="MouseFollowComponent" Class="Kinectitude.DirectInput.MouseFollowComponent"/>
    <Define Name="MouseClickEvent" Class="Kinectitude.DirectInput.MouseClickEvent"/>
  </Using>

  <Prototype Name="asteroid">
    <Component Type="TransformComponent" X="-100" Y="-100" Width="36" Height="38"/>
    <Component Type="ImageRenderComponent" Image="asteroid.png" />
    <Component Type="PhysicsComponent" MinimumSpeed="3" MaximumSpeed="3" XVelocity="0" YVelocity="0" Shape="Ellipse" Mass="1" Restitution="1" Friction="0" LinearDamping="0" MovesWhenHit="true" FixedRotation="false" IgnoreCollisionsWith="$shield_boundary"/>

    <Event Type="TriggerOccursEvent" Trigger="spawn_asteroid{scene.next}">
      <Condition If="scene.edge &gt;= 0 and scene.edge &lt; 1">
        <Action Type="SetAction" Target="TransformComponent.X" Value="[random * 1280]" />
        <Action Type="SetAction" Target="TransformComponent.Y" Value="0" />
        <Action Type="SetAction" Target="PhysicsComponent.XVelocity" Value="[640 - this.TransformComponent.X]" />
        <Action Type="SetAction" Target="PhysicsComponent.YVelocity" Value="[360 - this.TransformComponent.Y]" />
      </Condition>

      <Condition If="scene.edge &gt;= 1 and scene.edge &lt; 2">
        <Action Type="SetAction" Target="TransformComponent.X" Value="0" />
        <Action Type="SetAction" Target="TransformComponent.Y" Value="[random * 720]" />
        <Action Type="SetAction" Target="PhysicsComponent.XVelocity" Value="[640 - this.TransformComponent.X]" />
        <Action Type="SetAction" Target="PhysicsComponent.YVelocity" Value="[360 - this.TransformComponent.Y]" />
      </Condition>

      <Condition If="scene.edge &gt;= 2 and scene.edge &lt; 3">
        <Action Type="SetAction" Target="TransformComponent.X" Value="1280" />
        <Action Type="SetAction" Target="TransformComponent.Y" Value="[random * 720]" />
        <Action Type="SetAction" Target="PhysicsComponent.XVelocity" Value="[640 - this.TransformComponent.X]" />
        <Action Type="SetAction" Target="PhysicsComponent.YVelocity" Value="[360 - this.TransformComponent.Y]" />
      </Condition>

      <Condition If="scene.edge &gt;= 3 and scene.edge &lt; 4">
        <Action Type="SetAction" Target="TransformComponent.X" Value="[random * 1280]" />
        <Action Type="SetAction" Target="TransformComponent.Y" Value="720" />
        <Action Type="SetAction" Target="PhysicsComponent.XVelocity" Value="[640 - this.TransformComponent.X]" />
        <Action Type="SetAction" Target="PhysicsComponent.YVelocity" Value="[360 - this.TransformComponent.Y]" />
      </Condition>
    </Event>

    <Event Type="CollisionEvent" CollidesWith="$earth">
      <Action Type="IncrementAction" Target="scene.health" IncrementBy="-1"/>
      <!--<Action Type="PlaySoundAction" Filename="bottle_pop.wav" Looping="false" Volume="0.5"/>-->
      <Action Type="StopSoundAction" Filename="bottle_pop.wav"/>
      <Action Type="DestroyAction"/>
    </Event>

    <Event Type="CollisionEvent" CollidesWith="$boundary">
      <Action Type="IncrementAction" Target="scene.asteroidsDeflected" IncrementBy="1"/>
      <Action Type="DestroyAction"/>
    </Event>
  </Prototype>

  <Prototype Name="shield">
    <!--<Component Type="MouseFollowComponent" Direction="Both"/>-->
    <Component Type="KinectFollowComponent" Direction="Both" Player="1" Joint="HandRight"/>
    <Component Type="TransformComponent" X="640" Y="360" Width="100" Height="100" />
    <Component Type="RenderComponent" Shape="Ellipse" FillColor="Blue" Opacity="0.5"/>
    <Component Type="PhysicsComponent" XVelocity="0" YVelocity="0" Shape="Ellipse" Mass="1" Restitution="0" Friction="0" LinearDamping="0" MovesWhenHit="false" FixedRotation="true"/>
    <Event Type="CollisionEvent" CollidesWith="$asteroid">
      <Action Type="IncrementAction" Target="scene.deflections"/>
    </Event>
  </Prototype>

  <Prototype Name="earth">
    <Component Type="TransformComponent" X="640" Y="360" Width="350" Height="350" />
    <Component Type="PhysicsComponent" XVelocity="0" YVelocity="0" Shape="Ellipse" Mass="1" Restitution="0" Friction="0" LinearDamping="0" MovesWhenHit="false" FixedRotation="true" IgnoreCollisionsWith="$shield"/>
  </Prototype>

  <Prototype Name="text">
    <Component Type="TextRenderComponent" FontFamily="Courier New" FontWeight="Bold" FontStyle="Normal" FontStretch="Normal" FontSize="36" FontColor="White" />
  </Prototype>

  <Prototype Name="boundary">
    <Component Type="PhysicsComponent" Shape="Rectangle" Mass="1" Restitution="0" Friction="0" LinearDamping="0" FixedRotation="true" MovesWhenHit="false"/>
  </Prototype>

  <Prototype Name="shield_boundary">
    <Component Type="PhysicsComponent" Shape="Rectangler" Mass="1" Restitution="0" Friction="0" LinearDamping="0" FixedRotation="true" MovesWhenHit="false"/>
  </Prototype>

  <Scene Name="Game" health="10" asteroidsDeflected="0" edge="[random * 4]" next="0" deflections="0" interval="7" wave="0">

    <Entity Name="background">
      <Component Type="TransformComponent" X="640" Y="360" Width="1280" Height="720" />
      <Component Type="ImageRenderComponent" Image="asteroids_background.jpg" />
    </Entity>

    <Entity Prototype="shield">
    </Entity>

    <Entity Prototype="earth">
    </Entity>

    <!-- Walls to detect when an asteroid is deflected successfully -->
    <Entity Prototype="boundary" Name="top_asteroid_boundary">
      <Component Type="TransformComponent" X="640" Y="-100" Width="1280" Height="3" />  
    </Entity>

    <Entity Prototype="boundary" Name="bottom_asteroid_boundary">
      <Component Type="TransformComponent" X="640" Y="820" Width="1280" Height="3" />
    </Entity>

    <Entity Prototype="boundary" Name="right_asteroid_boundary">
      <Component Type="TransformComponent" X="1380" Y="360" Width="3" Height="720" />
    </Entity>

    <Entity Prototype="boundary" Name="left_asteroid_boundary">
      <Component Type="TransformComponent" X="-100" Y="360" Width="3" Height="720" />
    </Entity>

    <!-- Walls to prevent shield from moving off screen -->
    <Entity Prototype="shield_boundary" Name="top_shield_boundary">
      <Component Type="TransformComponent" X="640" Y="0" Width="1280" Height="3" />
    </Entity>

    <Entity Prototype="shield_boundary" Name="bottom_shield_boundary">
      <Component Type="TransformComponent" X="640" Y="720" Width="1280" Height="3" />
    </Entity>

    <Entity Prototype="shield_boundary" Name="right_shield_boundary">
      <Component Type="TransformComponent" X="1280" Y="360" Width="3" Height="720" />
    </Entity>

    <Entity Prototype="shield_boundary" Name="left_shield_boundary">
      <Component Type="TransformComponent" X="0" Y="360" Width="3" Height="720" />
    </Entity>

    <!-- Initialization -->
    <Entity>
      <Event Type="SceneStartsEvent">
        <Action Type="IncrementAction" Target="scene.health" IncrementBy="0"/>
        <Action Type="IncrementAction" Target="scene.asteroidsDeflected" IncrementBy="0"/>
        <Action Type="IncrementAction" Target="scene.wave" IncrementBy="0"/>
        <Action Type="IncrementAction" Target="scene.next"/>
        <Action Type="PlaySoundAction" Filename="bottle_pop.wav" Looping="true" Volume="0.5"/>
      </Event>
    </Entity>

    <!-- Health Text -->
    <Entity Prototype="text">
      <Component Type="TransformComponent" X="30" Y="20" Width="150"/>
      <Component Type="TextRenderComponent" Value="" FontSize="20" TextAlignment="Center" FontColor="White"/>
      <Event Type="AttributeChangesEvent" Target="{scene.health}">
        <Condition If="scene.health == 0">
          <Action Type="ChangeSceneAction" Target="GameOver"/>
        </Condition>

        <Action Type="SetAction" Target="TextRenderComponent.Value" Value="Health: {scene.health}"/>
      </Event>
    </Entity>

    <!-- Asteroids Deflected Text -->
    <Entity Prototype="text">
      <Component Type="TransformComponent" X="1050" Y="20" Width="100"/>
      <Component Type="TextRenderComponent" Value="" FontSize="20" TextAlignment="Center"/>
      <Event Type="AttributeChangesEvent" Target="{scene.asteroidsDeflected}">
        <Action Type="SetAction" Target="TextRenderComponent.Value" Value="Asteroids Deflected: {scene.asteroidsDeflected}"/>
        
        <!-- Asteroid wave timers. Creates a new timer every x number of asteroids deflected -->
        <Condition If="scene.asteroidsDeflected % 7 == 0 and scene.interval &gt;=3">
          <Action Type="IncrementAction" Target="scene.interval" IncrementBy="-1"/>
          <Action Type="IncrementAction" Target="scene.wave"/>
          <Action Type="CreateTimerAction" Name="spawnTimer{scene.wave}" Duration="scene.interval" Recurring="true" Trigger="create"/>
        </Condition>
      </Event>
    </Entity>

    <Entity Prototype="text">
      <Component Type="TransformComponent" X="640" Y="20" Width="0"/>
      <Component Type="TextRenderComponent" Value="" FontSize="20" TextAlignment="Center"/>
      <Event Type="AttributeChangesEvent" Target="{scene.wave}">
        <Action Type="SetAction" Target="TextRenderComponent.Value" Value="Wave: {scene.wave}"/>
      </Event>
    </Entity>

    <!-- Spawn asteroid trigger -->
    <Entity>
      <Event Type="TriggerOccursEvent" Trigger="create">
        <Action Type="CreateEntityAction" Prototype="asteroid"/>
        <Action Type="FireTriggerAction" Name="spawn_asteroid{scene.next}"/>
        <Action Type="IncrementAction" Target="scene.next"/>
        <Action Type="SetAction" Target="scene.edge" Value="[random * 4]"/>
      </Event>
    </Entity>
    
  </Scene>

  <Scene Name="GameOver">
    <Entity Name="background">
      <Component Type="TransformComponent" X="640" Y="360" Width="1280" Height="720" />
      <Component Type="ImageRenderComponent" Image="asteroids_background.jpg" />
    </Entity>

    <Entity Prototype="text">
      <Component Type="TransformComponent" X="640" Y="310" Width="0" Height="0"/>
      <Component Type="TextRenderComponent" Value="" FontSize="75" TextAlignment="Center" FontColor="Red"/>
      <Event Type="SceneStartsEvent">
        <Action Type="SetAction" Target="TextRenderComponent.Value" Value="GAME OVER"/>
      </Event>
    </Entity>

  </Scene>

</Game>