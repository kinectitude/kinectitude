<?xml version="1.0" encoding="utf-8" ?>
<game name="pong" Width="800" Height="600">

  <define part="KinectFollowComponent" fullName="Kinectitude.Kinect.KinectFollowComponent" file="Kinectitude.Kinect.dll" />

  <define part="PhysicsComponent" fullName="Kinectitude.Physics.PhysicsComponent" file="Kinectitude.Physics.dll" />
  <define part="CrossesLineEvent" fullName="Kinectitude.Physics.CrossesLineEvent" file="Kinectitude.Physics.dll" />
  <define part="ExitsLeftEvent" fullName="Kinectitude.Physics.ExitsLeftEvent" file="Kinectitude.Physics.dll" />
  <define part="ExitsRightEvent" fullName="Kinectitude.Physics.ExitsRightEvent" file="Kinectitude.Physics.dll" />

  <define part="RenderComponent" fullName="Kinectitude.Render.RenderComponent" file="Kinectitude.Render.dll" />
  <define part="TextRenderComponent" fullName="Kinectitude.Render.TextRenderComponent" file="Kinectitude.Render.dll" />
  <define part="SetTextAction" fullName="Kinectitude.Render.SetTextAction" file="Kinectitude.Render.dll" />

  <prototype name="paddle">
    <component type="KinectFollowComponent" Direction="Y" Player="P1" Joint="HandLeft"/>
    <component type="RenderComponent" FillColor="LimeGreen" Shape="rectangle"/>
    <component type="PhysicsComponent" XVelocity="0" YVelocity="0" Shape="rectangle"/>
    <component type="TransformComponent" Width="24" Height="128"/>
  </prototype>

  <prototype name="score">
    <component type="TextRenderComponent" Value="0" FontColor="White" />
  </prototype>

  <prototype name="bar">
    <component type="RenderComponent" FillColor="LimeGreen" Shape="rectangle"/>
    <component type="TransformComponent" Width="800" Height="10" X="400" Y="455"/>
  </prototype>

  <!-- tests that it will inherit from paddle-->
  <prototype name="endPaddle" prototype="paddle">
    <event type="CrossesLineEvent" Line="Y" Location="500"  Direction="Positive">
      <action type="PopSceneAction"/>
    </event>
    <event type="CrossesLineEvent" Line="Y" Location="150"  Direction="Negative">
      <action type="ChangeSceneAction" Target="main"/>
    </event>
  </prototype>

  <!--this is to test that muti-inheritance works and in the correct order it is stupid to actually do for this-->
  <prototype name="highY">
    <component type="TransformComponent" Y="100"/>
  </prototype>

  <scene name="main" numReadY="0" ready1="" ready2="">

    <entity name="topText">
      <component type="TransformComponent" X="250" Y="24"/>
      <component type="TextRenderComponent" Value="Kinect Wimbledon Delux" FontColor="Yellow" />
    </entity>

    <entity name="instructions">
      <component type="TransformComponent" X="220" Y="80"/>
      <component type="TextRenderComponent" Value="Move below the line to start" FontColor="White" />
    </entity>

    <entity name="ready1">
      <component type="TransformComponent" X="25" Y="125"/>
      <component type="TextRenderComponent" Value="Player 1 Not ready!" FontColor="White" />
      <event type="AttributeChangesEvent" Target="scene.ready1">
        <action type="SetTextAction" Value="scene.ready1" />
      </event>
    </entity>

    <entity name="ready2">
      <component type="TransformComponent" X="425" Y="125"/>
      <component type="TextRenderComponent" Value="Player 2 Not ready!" FontColor="White" />
      <event type="AttributeChangesEvent" Target="scene.ready2">
        <action type="SetTextAction" Value="scene.ready2" />
      </event>
    </entity>

    <entity name="player1" prototype="paddle">
      <component type="TransformComponent" X="17" Y="250"/>
      <event type="CrossesLineEvent" Line="Y" Location="450"  Direction="Positive">
        <action type="SetAttributeAction" Target="scene.ready1" Value="player 1 is ready!"/>
        <!-- <condition if="scene.ready2"> -->
        <!-- TODO replace with line above this complicated epressions for ifs, checked in debug to see that it parsed it right-->
        <condition if="scene.ready2 and scene.ready1 or scene.ready1 and scene.ready2">
          <action type="ChangeSceneAction" Target="game"/>
        </condition>
      </event>
    </entity>

    <entity name="player2" prototype="paddle">
      <component type="TransformComponent" X="782" Y="250"/>
      <!--this is testing to see that I can ovrride things in a prototype-->
      <component type="KinectFollowComponent" Player="P1" Joint="HandRight" />
      <event type="CrossesLineEvent" Line="Y" Location="450"  Direction="Positive">
        <action type="SetAttributeAction" Target="scene.ready2" Value="player 2 is ready!"/>
        <condition if="scene.ready1">
          <action type="ChangeSceneAction" Target="game"/>
        </condition>
      </event>
    </entity>

    <entity name="readybar" prototype="bar"/>
  </scene>

  <scene name="game" player1Score="0" player2Score="0">

    <entity name="player1" prototype="paddle">
      <component type="TransformComponent" X="17" Y="250"/>
    </entity>

    <entity name="player2" prototype="paddle">
      <component type="KinectFollowComponent" Player="P1" Joint="HandRight" />
      <component type="TransformComponent" X="782" Y="250"/>
    </entity>

    <entity name="ball">
      <component type="RenderComponent" FillColor="LimeGreen" Shape="circle" />
      <component type="TransformComponent" X="250" Y="0" Width="24" Height="24"/>
      <component type="PhysicsComponent" XVelocity="40" YVelocity="20" Shape="circle" />
      <event type="ExitsLeftEvent">
        <action type="SetPositionAction" X="400" Y="300" />
        <action type="IncrementAction" Target="scene.player2Score" />
      </event>
      <!-- this is done differently then the other one to test both methods-->
      <event type="ExitsRightEvent">
        <action type="SetPositionAction" X="400" Y="300" />
        <action type="IncrementAction" Target="scene.player1Score" />
        <action type="FireTriggerAction" Name="player1Scores"/>
      </event>
    </entity>

    <entity prototype="score">
      <component type="TransformComponent" X="56" Y="24"/>
      <event type="TriggerOccursEvent" Trigger="player1Scores">
        <action type="SetTextAction" Value="scene.player1Score" />
      </event>
      <event type="AttributeEqualsEvent" Target="scene.player1Score" Value="7">
        <action type="SetAttributeAction" Target="game.winner" Value="player 1 wins"/>
        <action type="ChangeSceneAction" Target="gameOver"/>
      </event>
    </entity>

    <entity prototype="score">
      <component type="TransformComponent"  X="724" Y="24"/>
      <event type="AttributeChangesEvent" Target="scene.player2Score">
        <action type="SetTextAction" Value="scene.player2Score" />
      </event>
      <event type="AttributeEqualsEvent" Target="scene.player2Score" Value="7">
        <action type="SetAttributeAction" Target="game.winner" Value="player 2 wins"/>
        <action type="ChangeSceneAction" Target="gameOver"/>
      </event>
    </entity>

  </scene>

  <scene name="gameOver">
    <entity name="gameOver">
      <component type="TransformComponent" X="300" Y="20"/>
      <!-- we should make this work later so it can have at least an inital value of what it is
      <component type="TextRenderComponent" Value="={game.winner}" FontColor="White" />-->
      <!--This can simply have Value=game.winner, since it won't change, but I needed somewhere to test Scene StartEvent-->
      <component type="TextRenderComponent" Value="" FontColor="White" />
      <event type="SceneStartsEvent">
        <action type="SetTextAction" Value="game.winner" />
      </event>
    </entity>

    <entity name="instructions">
      <component type="TransformComponent" X="100" Y="100"/>
      <component type="TextRenderComponent" Value="Top line to for menu bottom to quit" FontColor="White" />
    </entity>

    <entity name="player1" prototype="endPaddle">
      <component type="TransformComponent" X="17" Y="250"/>
    </entity>

    <entity name="player2" prototype="endPaddle">
      <component type="TransformComponent" X="782" Y="250"/>
      <component type="KinectFollowComponent" Joint="HandRight" />
    </entity>

    <entity name="bottomBar" prototype="bar">
      <component type="TransformComponent" Y="500"/>
    </entity>

    <entity name="topBar" prototype="highY bar"/>

  </scene>
</game>