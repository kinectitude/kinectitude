using Kinectitude.Kinect.dll
{
    define KinectFollowComponent as Kinectitude.Kinect.KinectFollowComponent
    define Gesture as Kinectitude.Kinect.GestureEvent
}

using Kinectitude.Physics.dll
{
    define PhysicsComponent as Kinectitude.Physics.PhysicsComponent
    define CrossesLine as Kinectitude.Physics.CrossesLineEvent
    define Collision as Kinectitude.Physics.CollisionEvent
}

using Kinectitude.Render.dll
{
    define RenderComponent as Kinectitude.Render.RenderComponent
    define TextRenderComponent as Kinectitude.Render.TextRenderComponent
    define ImageRenderComponent as Kinectitude.Render.ImageRenderComponent
}

Game(Name = "breakout", FirstScene = "game")
{
    Prototype paddle()
    {
        Component KinectFollowComponent(Direction = "X", Player = 1, Joint = "HandRight")
        Component RenderComponent(FillColor = "Black", Shape = "Rectangle")
        Component PhysicsComponent(XVelocity = 0, YVelocity = 0, Shape = "Rectangle", Restitution = "0", Mass = "1", Friction = "0", LinearDamping = "0", MovesWhenHit = false, FixedRotation = true)
        Component Transform(Width = 128, Height = 24)
    }

    Prototype ball(Value = 0)
    {
        Component RenderComponent(FillColor = "Black", Shape = "Rectangle")
        Component Transform(X = 400, Y = 550, Width = 24, Height = 24)
        Component PhysicsComponent(MinimumSpeed = 50, MaximumSpeed = 50, XVelocity = -40, YVelocity = -20, Shape = "Ellipse", Restitution = 1, Mass = 1, Friction = 0, LinearDamping = 0, MovesWhenHit = true, AngularVelocity = 1, FixedRotation = false)
        
        Event TriggerOccurs(Trigger = "gameOver")
        {
            Destroy()
        }
    }

    Prototype primaryBall : ball(ball = "primary")
    {
        Event Collision(CollidesWith = $bottom_wall)
        {
            Transform.X = 400
            Transform.Y = 300
            scene.balls -= 1
        }
    }

    Prototype extraBall : ball(ball = "extra")
    {
        Event Collision(CollidesWith = $bottom_wall)
        { 
            Destroy()
        }
    }
    
    Prototype block()
    {
        Component RenderComponent(FillColor = "Red", Shape = "Rectangle")
        Component PhysicsComponent(XVelocity = 0, YVelocity = 0, Shape = "Rectangle", Restitution = 0, Mass = 1, Friction = 0, LinearDamping = 0, MovesWhenHit = false, FixedRotation = true)
        Component Transform(Width = 95, Height = 20)
        
        Event Collision(CollidesWith = $extraBall+$primaryBall)
        {
            scene.blocks -= 1
            Destroy()
        }
    }

    Prototype spawn1Block : block()
    {
        Component RenderComponent(FillColor = "Orange")

        Event Collision(CollidesWith = $extraBall + $primaryBall)
        {
            CreateEntity(Prototype = "extraBall")
        }
    }

    Prototype spawn3Block : block()
    {
        Component RenderComponent(FillColor = "Yellow")

        Event Collision(CollidesWith = $extraBall+$primaryBall)
        {
            CreateEntity(Prototype = "extraBall")
            CreateEntity(Prototype = "extraBall")
            CreateEntity(Prototype = "extraBall")
            scene.show = "A " + ^CollidesWith.ball + " at X " + ^CollidesWith.Transform.X
        }
    }

    Prototype text()
    {
        Component TextRenderComponent(FontFamily = "Arial", FontWeight = "Normal", FontStyle = "Normal", FontStretch = "Normal", FontSize = "36", FontColor = "Black")
    }
    
    Scene game(balls = 10, blocks = 24)
    {
        Entity player : paddle()
        {
            Component Transform(X = 400, Y = 560)
        }
        
        Entity  : spawn3Block()
        {
            Component Transform(X = 50, Y = 200)
        }
        
        Entity : block()
        {
            Component Transform(X = 150, Y = 200)
        }
        
        Entity : block()
        {
           Component Transform(X = 250, Y = 200)
        }
        
        Entity : block()
        {
            Component Transform(X = 350, Y = 200)
        }
        
        Entity : block()
        {
            Component Transform(X = 450, Y = 200)
        }
        
        Entity : block()
        {
            Component Transform(X = 550, Y = 200)
        }
        
        Entity : block()
        {
            Component Transform(X = 650, Y = 200)
        }
        
        Entity : spawn3Block()
        {
            Component Transform(X = 750, Y = 200)
        }
        
        Entity : block()
        {
            Component Transform(X = 50, Y = 225)
        }
        
        Entity : block()
        {
            Component Transform(X = 150, Y = 225)
        }
        
        Entity : block()
        {
            Component Transform(X = 250, Y = 225)
        }
        
        Entity : block()
        {
            Component Transform(X = 350, Y = 225)
        }
        
        Entity : block()
        {
            Component Transform(X = 450, Y = 225)
        }
        
        Entity : block()
        {
            Component Transform(X = 550, Y = 225)
        }
        
        Entity : block()
        {
            Component Transform(X = 650, Y = 225)
        }
        
        Entity : block()
        {
            Component Transform(X = 750, Y = 225)
        }
        
        Entity : block()
        {
            Component Transform(X = 50, Y = 250)
        }
        
        Entity : spawn1Block()
        {
            Component Transform(X = 150, Y = 250)
        }
        
        Entity : block()
        {
            Component Transform(X = 250, Y = 250)
        }
        
        Entity : spawn1Block()
        {
            Component Transform(X = 350, Y = 250)
        }
        
        Entity : block()
        {
            Component Transform(X = 450, Y = 250)
        }
        
        Entity : spawn1Block()
        {
            Component Transform(X = 550, Y = 250)
        }
        
        Entity : block()
        {
            Component Transform(X = 650, Y = 250)
        }
        
        Entity : spawn1Block()
        {
            Component Transform(X = 750, Y = 250)
        }
        
        Entity top_wall()
        {
            Component Transform(X = 400, Y = 0, Width = 800, Height = 2)
            Component PhysicsComponent(XVelocity = 0, YVelocity = 0, Shape = "Rectangle", Restitution = 0, Mass = 1, LinearDamping = 0, MovesWhenHit = false, FixedRotation = true)
        }
        
        Entity bottom_wall()
        {
            Component Transform(X = 400, Y = 600, Width = 800, Height = 2)
            Component PhysicsComponent(XVelocity = 0, YVelocity = 0, Shape = "Rectangle", Restitution = 0, Mass = 1, LinearDamping = 0, MovesWhenHit = false , FixedRotation = true)
        }

        Entity left_wall()
        {
            Component Transform(X = 0, Y = 300, Width = 2, Height = 600)
            Component PhysicsComponent(XVelocity = 0, YVelocity = 0, Shape = "Rectangle", Restitution = 0, Mass = 1, LinearDamping = 0, MovesWhenHit = false, FixedRotation = true)
        }

        Entity right_wall()
        {
            Component Transform(X = 800, Y = 300, Width = 2, Height = 600)
            Component PhysicsComponent(XVelocity = 0, YVelocity = 0, Shape = "Rectangle", Restitution = 0, Mass = 1, LinearDamping = 0, MovesWhenHit = false, FixedRotation = true)
        }
        
        Entity : primaryBall()
        {
            Component RenderComponent(FillColor = "CornflowerBlue")
        }
        
        Entity : text()
        {
            Component Transform(X = 0, Y = 0, Width = 800)
            Component TextRenderComponent(Value = "", FontSize = 20, TextAlignment = "Center")
            
            Event AttributeChanges(Target = scene.balls + scene.blocks)
            {
                TextRenderComponent.Value = "Extra Balls: " + scene.balls + " blocks left " + scene.blocks + ". log of 100 is " + Log(100) + " log of 8, base 2 is " + Log(8, 2)
                if (scene.blocks == 0)
                {
                    TextRenderComponent.Value = "YOU WIN!"
                    FireTrigger(Name = "gameOver")
                }
                else if (scene.blocks > 5)
                {
                    TextRenderComponent.Value += " Keep going there!"
                }
                else
                {
                    TextRenderComponent.Value += " Keep going almost there!"
                }
                if (scene.balls < 0)
                {
                    TextRenderComponent.Value  = "GAME OVER"
                    FireTrigger(Name="gameOver")
                }
            }
        }
        Entity : text()
        {
            Component Transform(X = 0, Y = 100, Width = 800)
            Component TextRenderComponent(Value = "", FontSize = 20, TextAlignment = "Center")
            
            Event AttributeChanges(Target = scene.show)
            {
                TextRenderComponent.Value = "The value of scene.show " + scene.show
            }
        }
    }
}