using Kinectitude.Tests.dll{
    define MockComponent as Kinectitude.Tests.Core.MockComponent
    define MockComponent2 as Kinectitude.Tests.Core.MockComponent2
    define Assertion as Kinectitude.Tests.Core.AssertionAction
}

Game (Width = 800, Height=600, FirstScene="test", IsFullScreen=false){
    Scene test(lol = "lollol"){
        Entity runTests(valueX = true, valueY = false, value1 = true){
            Component MockComponent()
            Event SceneStarts(){
                val = 1
            }
            Event AttributeChanges(Target=runTests.val){
                Assertion(LS=runTests.val, RS=1, Assertion="runTests.val is set", OnlyRunIf= true)
                this.MockComponent.IntVal = 100
                Assertion(LS=runTests.MockComponent.IntVal, RS=200, Assertion="IntVal is set, and attribute equals is run first", OnlyRunIf= true)
                scene.x = 99
            }
            Event AttributeChanges(Target=this.MockComponent.IntVal){
                MockComponent.IntVal = 200
            }
            Event AttributeChanges(Target=scene.x){
                Assertion(LS=scene.x, RS=99, Assertion="scene.x", OnlyRunIf= true)
                scene.balls = 9
                scene.rofl = 9
                scene.left = 1.5
                scene.shift = 0x100 << 2
                Assertion(LS=scene.shift, RS=0x400, Assertion="left shift", OnlyRunIf= true)
                scene.shift  = 0x400 >> 2
                Assertion(LS=scene.shift, RS=0x100, Assertion="right shift", OnlyRunIf= true)
                this.bool = false
                this.bool = true
                this.bool2 = true
                neg = 10
                not = true
                this.lv = 1
                this.lv = 9
                lv = 9
                this.lv = 10
                this.lv = 1
				valueY = true
				value2 = true
				value2 = false
            }
            Event AttributeChanges(Target=scene.balls + scene.rofl){
                Assertion(LS=1, RS=1, Assertion="balls + rofl", OnlyRunIf= true)
            }
            Event AttributeChanges(Target=scene.left * scene.lol){
                Assertion(LS="lollollol", RS=scene.left * scene.lol, Assertion="Multiply words", OnlyRunIf= true)
            }
            Event AttributeChanges(Target=scene.left/2){
                Assertion(LS=.75, RS=scene.left/2, Assertion="divide", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=-this.neg){
                Assertion(LS=-this.neg, RS=-10, Assertion="-ve", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=!this.not){
                Assertion(LS=!this.not, RS=false, Assertion="not", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=scene.balls - scene.rofl){
                Assertion(LS=1, RS=1, Assertion="balls - rofl", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=scene.balls / 1){
                Assertion(LS=9, RS=scene.balls/1, Assertion="balls / 1", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=scene.balls % 2){
                Assertion(LS=1, RS=scene.balls%2, Assertion="balls % 2", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=scene.balls ** 2){
                Assertion(LS=81, RS=scene.balls**2, Assertion="balls ** 2", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=this.bool or this.bool2){
                Assertion(LS=true, RS=this.bool || this.bool2, Assertion="or", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=this.bool == this.bool2){
                Assertion(LS=1, RS=1, Assertion="eql", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=this.bool != this.bool2){
                Assertion(LS=1, RS=1, Assertion="neq", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=this.lv < scene.balls){
                Assertion(LS=1, RS=1, Assertion="lt", OnlyRunIf= true)
            }

            Event AttributeChanges(Target=this.lv <= scene.balls){
                Assertion(LS=1, RS=1, Assertion="le", OnlyRunIf= true)
            }

            Event AttributeChanges(Target = this.lv > scene.balls){
                Assertion(LS=1, RS=1, Assertion="gt", OnlyRunIf= true)
            }

            Event AttributeChanges(Target= this.lv >= scene.balls){
                Assertion(LS=true, RS=true, Assertion="ge", OnlyRunIf= true)
            }
			Event AttributeChanges(Target= valueX && valueY){
                Assertion(LS=true, RS=true, Assertion="and", OnlyRunIf= true)
				valueX = false
            }
			Event AttributeChanges(Target= valueX && valueY){
                Assertion(LS=true, RS=true, Assertion="and", OnlyRunIf= true)
            }
			Event AttributeChanges(Target= value1 && value2){
                Assertion(LS=true, RS=true, Assertion="and 2", OnlyRunIf= true)
            }
			Event AttributeChanges(Target= value1 && value2){
                Assertion(LS=true, RS=true, Assertion="and 2", OnlyRunIf= true)
            }
        }
    }
}