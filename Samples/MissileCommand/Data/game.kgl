using Kinectitude.Render.dll
{
    define RenderService as Kinectitude.Render.RenderService
    define RenderManager as Kinectitude.Render.RenderManager
    define RenderComponent as Kinectitude.Render.RenderComponent
    define ImageRenderComponent as Kinectitude.Render.ImageRenderComponent
    define TextRenderComponent as Kinectitude.Render.TextRenderComponent
}

using Kinectitude.Kinect.dll
{
    define KinectFollowComponent as Kinectitude.Kinect.KinectFollowComponent
}

using Kinectitude.Physics.dll
{
    define PhysicsComponent as Kinectitude.Physics.PhysicsComponent
    define PhysicsManager as Kinectitude.Physics.PhysicsManager
    define CollisionEvent as Kinectitude.Physics.CollisionEvent
    define CrossesLineEvent as Kinectitude.Physics.CrossesLineEvent
}

using Kinectitude.Input.dll
{
    define MouseFollowComponent as Kinectitude.Input.MouseFollowComponent
    define MouseClickEvent as Kinectitude.Input.MouseClickEvent
    define KeyEvent as Kinectitude.Input.KeyEvent
    define MouseManager as Kinectitude.Input.MouseManager
    define KeyboardFollowComponent as Kinectitude.Input.KeyboardFollowComponent
}

Game(Name = "Asteroid Defense", FirstScene = "Menu")
{
    Prototype explosion()
    {
        Component Transform(Width = 64, Height = 48)
        Component ImageRenderComponent(Image = "explosion.png", Animated = True, Duration = 3, Stretched = False)
        Component PhysicsComponent(Shape = "Ellipse", BodyType = "Static", IgnoreCollisionsWith = $missile + $missileTarget)
        
        Event OnCreate()
        {
            myId = scene.nextExplosionId
            scene.nextExplosionId += 1
            Transform.X = scene.lastMissileX
            Transform.Y = scene.lastMissileY - 30
            CreateTimer(Name = "explosionTimer" + myId, Duration = 3, Trigger = "destroyExplosion", Recurring = False)
        }

        Event TriggerOccurs(Trigger = "destroyExplosion")
        {
            if (myId < scene.nextExplosionId)
            {
                Destroy()
            }
        }
    }
    
    Prototype asteroid()
    {
        Component Transform(Width = 64, Height = 64)
        Component ImageRenderComponent(Image = "asteroid.png")
        Component PhysicsComponent(Shape = "Ellipse", Mass = 10, AngularVelocity = 1, IgnoreCollisionsWith = $missile + $missileTarget + $asteroid + $generalClicker)
        
        Event OnCreate()
        {
            Transform.X = Random(0, 1280)
            Transform.Y = -50
            PointTowards(X = Random(0, 1280), Y = 720)
            speedRand = Random(0, 100)
            if (speedRand < 70)
            {
                PhysicsComponent.Speed = 7
            }
            else if (speedRand < 90)
            {
                PhysicsComponent.Speed = 14
            }
            else
            {
                PhysicsComponent.Speed = 21
            }
        }

        Event CollisionEvent(CollidesWith = $explosion)
        {
            scene.destroyed += 1
            Destroy()
        }

        Event CollisionEvent(CollidesWith = $earthTarget)
        {
            Destroy()
        }
    }
    
    Prototype earthTarget()
    {
        Component Transform()
        Component PhysicsComponent(BodyType = "Static")
        
        Event CollisionEvent(CollidesWith = $asteroid)
        {
            scene.health -= 0.01
        }
    }
    
    Prototype missileTarget()
    {
        Component Transform(Width = 32, Height = 32)
        Component PhysicsComponent(Shape = "Ellipse", BodyType = "Static", IgnoreCollisionsWith = $asteroid + $explosion)
        
        Event OnCreate()
        {
            Transform.X = scene.currentTargetX
            Transform.Y = scene.currentTargetY
        }

        Event CollisionEvent(CollidesWith = $missile)
        {
            Destroy()
        }
    }
    
    Prototype missile()
    {
        Component Transform(Width = 60, Height = 13)
        Component ImageRenderComponent(Image = "missile.png")
        Component PhysicsComponent(IgnoreCollisionsWith = $earthTarget + $asteroid + $explosion + $generalClicker)
        
        Event OnCreate()
        {
            Transform.X = scene.launchX
            Transform.Y = 750
            PointTowards(X = scene.currentTargetX, Y = scene.currentTargetY)
            PhysicsComponent.Speed = 80
        }

        Event CollisionEvent(CollidesWith = $missileTarget)
        {
            scene.lastMissileX = Transform.X
            scene.lastMissileY = Transform.Y
            CreateEntity(Prototype = "explosion")
            Destroy()
        }
    }
    
    Prototype generalCursor()
    {
        Component Transform(Width = 48, Height = 48)
        Component ImageRenderComponent(Image = "target.png", Animated = False)
        Component KinectFollowComponent(ScaleWidth = 1280, ScaleHeight = 720, SkeletonMaxX = 0.2, SkeletonMaxY = 0.2, IgnoresPhysics = True)
    }
    
    Prototype generalClicker()
    {
        Component Transform(Width = 64, Height = 64)
        Component KinectFollowComponent(Joint = "HandLeft", ScaleWidth = 1280, ScaleHeight = 800, SkeletonMaxX = 0.2, SkeletonMaxY = 0.2, IgnoresPhysics = True)
        Component RenderComponent(Shape = "Ellipse", FillColor = "#f00", Opacity = 0.4)
        
        Event SceneStarts()
        {
            prevY = Transform.Y
        }

        Event AttributeChanges(Target = Transform.Y)
        {
            if (Transform.Y < 360)
            {
                if (prevY >= 360)
                {
                    FireTrigger(Name = "click")
                }
            }
            prevY = Transform.Y
        }
    }
    
    Service RenderService(Width = 1280, Height = 720)
    
    Scene Gameplay(health = 1)
    {
        Manager RenderManager(Width = 1280, Height = 720)        
        Manager MouseManager()        
        Manager PhysicsManager()
        
        Entity stars()
        {
            Component Transform(X = 640, Y = 360, Width = 1280, Height = 720)
            Component ImageRenderComponent(Image = "starfield.png")
        }
        
        Entity cursor : generalCursor()
        {
            Component Transform(X = 308, Y = 192)
            
            Event TriggerOccurs(Trigger = "click")
            {
                scene.currentTargetX = Transform.X
                scene.currentTargetY = Transform.Y
                if (scene.currentTargetX < 426)
                {
                    scene.launchX = 213
                }
                else if (scene.currentTargetX < 852)
                {
                    scene.launchX = 639
                }
                else
                {
                    scene.launchX = 1065
                }
                CreateEntity(Prototype = "missileTarget")
                CreateEntity(Prototype = "missile")
            }
        }
        
        Entity events()
        {
            Component Transform(X = 595, Y = 617, Width = 48, Height = 48)
            
            Event SceneStarts()
            {
                CreateTimer(Name = "asteroidTimer", Duration = 2.2, Trigger = "makeAsteroid")
            }

            Event TriggerOccurs(Trigger = "makeAsteroid")
            {
                asteroids += 1
                CreateEntity(Prototype = "asteroid")
            }

            Event KeyEvent(Key = "Escape")
            {
                Quit()
            }
        }
        
        Entity healthBackground()
        {
            Component Transform(X = 640, Y = 32, Width = 600, Height = 32)
            Component RenderComponent(Shape = "Rectangle", FillColor = "DarkGray")
        }
        
        Entity healthCounter()
        {
            Component Transform(X = 640, Y = 32, Width = 600, Height = 32)
            Component RenderComponent(Shape = "Rectangle", FillColor = "Blue")
            
            Event AttributeChanges(Target = scene.health)
            {
                Transform.Width = scene.health * 600
                Transform.X -= 3
            }
        }
        
        Entity : earthTarget()
        {
            Component Transform(X = 640, Y = 562, Width = 1280, Height = 16)
            
            Event CollisionEvent(CollidesWith = $asteroid)
            {
                scene.health -= 0.01
            }
        }
        
        Entity destroyed()
        {
            Component Transform(X = 18, Y = 18)
            Component TextRenderComponent(Value = "DESTROYED: 0", FontWeight = "Bold", FontSize = 24, FontColor = "#ffffff")
            
            Event AttributeChanges(Target = scene.destroyed)
            {
                TextRenderComponent.Value = "DESTROYED: " + scene.destroyed
            }
        }
        
        Entity launcher : generalClicker()
        {
            Component Transform(X = 138, Y = 326)
        }
    }
    
    Scene Menu()
    {
        Entity ()
        {
            Component Transform(X = 640, Y = 360, Width = 1280, Height = 720)
            Component ImageRenderComponent(Image = "starfield.png")
        }
        
        Entity title()
        {
            Component Transform(X = 640, Y = 120, Width = 278, Height = 150)
            Component ImageRenderComponent(Image = "title.png", Opacity = 1)
        }
        
        Entity cursor : generalCursor()
        {
            Component Transform(X = 560, Y = 295)
        }
        
        Entity playButton()
        {
            Component Transform(X = 360, Y = 432, Width = 496, Height = 144)
            Component RenderComponent(Shape = "Rectangle", FillColor = "#0f0", Opacity = 0.15)
            
            Event AttributeChanges(Target = cursor.Transform.X + cursor.Transform.Y)
            {
                hovering = false
                if (cursor.Transform.X > Transform.X - Transform.Width / 2)
                {
                    if (cursor.Transform.X < Transform.X + Transform.Width / 2)
                    {
                        if (cursor.Transform.Y > Transform.Y - Transform.Height / 2)
                        {
                            if (cursor.Transform.Y < Transform.Y + Transform.Height / 2)
                            {
                                hovering = true
                            }
                        }
                    }
                }
                if (hovering)
                {
                    RenderComponent.Opacity = 0.4
                }
                else
                {
                    RenderComponent.Opacity = 0.15
                }
            }

            Event TriggerOccurs(Trigger = "click")
            {
                if (hovering)
                {
                    PushScene(Target = "Gameplay")
                }
            }
        }
        
        Entity quitButton()
        {
            Component Transform(X = 920, Y = 432, Width = 496, Height = 144)
            Component RenderComponent(Shape = "Rectangle", FillColor = "#f00", Opacity = 0.15)
            
            Event AttributeChanges(Target = cursor.Transform.X + cursor.Transform.Y)
            {
                hovering = false
                if (cursor.Transform.X > Transform.X - Transform.Width / 2)
                {
                    if (cursor.Transform.X < Transform.X + Transform.Width / 2)
                    {
                        if (cursor.Transform.Y > Transform.Y - Transform.Height / 2)
                        {
                            if (cursor.Transform.Y < Transform.Y + Transform.Height / 2)
                            {
                                hovering = true
                            }
                        }
                    }
                }
                if (hovering)
                {
                    RenderComponent.Opacity = 0.4
                }
                else
                {
                    RenderComponent.Opacity = 0.15
                }
            }

            Event TriggerOccurs(Trigger = "click")
            {
                if (hovering)
                {
                    Quit()
                }
            }
        }
        
        Entity ()
        {
            Component Transform(X = 880, Y = 410)
            Component TextRenderComponent(Value = "QUIT", FontSize = 36, FontColor = "#fff")
        }
        
        Entity ()
        {
            Component Transform(X = 263, Y = 410)
            Component TextRenderComponent(Value = "PLAY GAME", FontSize = 36, FontColor = "#fff")
        }
        
        Entity : generalClicker()
        {
            Component Transform(X = 479, Y = 291)
            Component RenderComponent(Opacity = 0.3)
        }
        
        Entity ()
        {
            Component Transform(X = 531, Y = 197)
            Component TextRenderComponent(Value = "By Team Kinectitude", FontSize = 24, FontColor = "White")
        }
    }
}